%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/Alex/Documents/University/Year 4/Design Project 4 /Modelling/DP4 Model/senateEDD.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/02/27 09:43:56

%% Initialize variables.
filename = '/Users/Alex/Documents/University/Year 4/Design Project 4 /Modelling/DP4 Model/senateEDD.csv';
delimiter = ',';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using the
% specified date format.
try
    dates{1} = datetime(dataArray{1}, 'Format', 'dd/MM/yyyy', 'InputFormat', 'dd/MM/yyyy');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{1} = cellfun(@(x) x(2:end-1), dataArray{1}, 'UniformOutput', false);
        dates{1} = datetime(dataArray{1}, 'Format', 'dd/MM/yyyy', 'InputFormat', 'dd/MM/yyyy');
    catch
        dates{1} = repmat(datetime([NaN NaN NaN]), size(dataArray{1}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{1});
anyInvalidDates = isnan(dates{1}.Hour) - anyBlankDates;
dates = dates(:,1);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]);
rawCellColumns = raw(:, 2);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
senateEDD = table;
senateEDD.Date = dates{:, 1};
senateEDD.Day = rawCellColumns(:, 1);
senateEDD.TotalUnits = cell2mat(rawNumericColumns(:, 1));
senateEDD.VarName4 = cell2mat(rawNumericColumns(:, 2));
senateEDD.VarName5 = cell2mat(rawNumericColumns(:, 3));
senateEDD.VarName6 = cell2mat(rawNumericColumns(:, 4));
senateEDD.VarName7 = cell2mat(rawNumericColumns(:, 5));
senateEDD.VarName8 = cell2mat(rawNumericColumns(:, 6));
senateEDD.VarName9 = cell2mat(rawNumericColumns(:, 7));
senateEDD.VarName10 = cell2mat(rawNumericColumns(:, 8));
senateEDD.VarName11 = cell2mat(rawNumericColumns(:, 9));
senateEDD.VarName12 = cell2mat(rawNumericColumns(:, 10));
senateEDD.VarName13 = cell2mat(rawNumericColumns(:, 11));
senateEDD.VarName14 = cell2mat(rawNumericColumns(:, 12));
senateEDD.VarName15 = cell2mat(rawNumericColumns(:, 13));
senateEDD.VarName16 = cell2mat(rawNumericColumns(:, 14));
senateEDD.VarName17 = cell2mat(rawNumericColumns(:, 15));
senateEDD.VarName18 = cell2mat(rawNumericColumns(:, 16));
senateEDD.VarName19 = cell2mat(rawNumericColumns(:, 17));
senateEDD.VarName20 = cell2mat(rawNumericColumns(:, 18));
senateEDD.VarName21 = cell2mat(rawNumericColumns(:, 19));
senateEDD.VarName22 = cell2mat(rawNumericColumns(:, 20));
senateEDD.VarName23 = cell2mat(rawNumericColumns(:, 21));
senateEDD.VarName24 = cell2mat(rawNumericColumns(:, 22));
senateEDD.VarName25 = cell2mat(rawNumericColumns(:, 23));
senateEDD.VarName26 = cell2mat(rawNumericColumns(:, 24));
senateEDD.VarName27 = cell2mat(rawNumericColumns(:, 25));
senateEDD.VarName28 = cell2mat(rawNumericColumns(:, 26));
senateEDD.VarName29 = cell2mat(rawNumericColumns(:, 27));
senateEDD.VarName30 = cell2mat(rawNumericColumns(:, 28));
senateEDD.VarName31 = cell2mat(rawNumericColumns(:, 29));
senateEDD.VarName32 = cell2mat(rawNumericColumns(:, 30));
senateEDD.VarName33 = cell2mat(rawNumericColumns(:, 31));
senateEDD.VarName34 = cell2mat(rawNumericColumns(:, 32));
senateEDD.VarName35 = cell2mat(rawNumericColumns(:, 33));
senateEDD.VarName36 = cell2mat(rawNumericColumns(:, 34));
senateEDD.VarName37 = cell2mat(rawNumericColumns(:, 35));
senateEDD.VarName38 = cell2mat(rawNumericColumns(:, 36));
senateEDD.VarName39 = cell2mat(rawNumericColumns(:, 37));
senateEDD.VarName40 = cell2mat(rawNumericColumns(:, 38));
senateEDD.VarName41 = cell2mat(rawNumericColumns(:, 39));
senateEDD.VarName42 = cell2mat(rawNumericColumns(:, 40));
senateEDD.VarName43 = cell2mat(rawNumericColumns(:, 41));
senateEDD.VarName44 = cell2mat(rawNumericColumns(:, 42));
senateEDD.VarName45 = cell2mat(rawNumericColumns(:, 43));
senateEDD.VarName46 = cell2mat(rawNumericColumns(:, 44));
senateEDD.VarName47 = cell2mat(rawNumericColumns(:, 45));
senateEDD.VarName48 = cell2mat(rawNumericColumns(:, 46));
senateEDD.VarName49 = cell2mat(rawNumericColumns(:, 47));
senateEDD.VarName50 = cell2mat(rawNumericColumns(:, 48));
senateEDD.VarName51 = cell2mat(rawNumericColumns(:, 49));

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% senateEDD.Date=datenum(senateEDD.Date);

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawCellColumns R;